// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button Big Button 1`] = `
<Button
  big={true}
  inverse={false}
  loading={false}
  secondary={false}
>
  <styled.button
    big={true}
    inverse={false}
    secondary={false}
  >
    <StyledComponent
      big={true}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "bSoPcf",
            "rules": Array [
              "
  border-radius: 5px;
  background-color: ",
              [Function],
              ";
  color: #fff;
  padding: 10px 15px;
  font-size: ",
              [Function],
              ";
  outline: none;
  border: none;
  cursor: pointer;
  margin: 15px;
  border: 2px solid ",
              [Function],
              ";
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inverse={false}
      secondary={false}
    >
      <button
        className="sc-htpNat bSoPcf"
      >
        Secondary Button
      </button>
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button Inverse Button 1`] = `
<Button
  big={false}
  inverse={true}
  loading={false}
  secondary={false}
>
  <styled.button
    big={false}
    inverse={true}
    secondary={false}
  >
    <StyledComponent
      big={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "ccXbUG",
            "rules": Array [
              "
  border-radius: 5px;
  background-color: ",
              [Function],
              ";
  color: #fff;
  padding: 10px 15px;
  font-size: ",
              [Function],
              ";
  outline: none;
  border: none;
  cursor: pointer;
  margin: 15px;
  border: 2px solid ",
              [Function],
              ";
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inverse={true}
      secondary={false}
    >
      <button
        className="sc-htpNat ccXbUG"
      >
        Secondary Button
      </button>
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button Loading Button 1`] = `
<Button
  big={false}
  inverse={false}
  loading={true}
  secondary={false}
>
  <styled.button
    big={false}
    inverse={false}
    secondary={false}
  >
    <StyledComponent
      big={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "hRPhco",
            "rules": Array [
              "
  border-radius: 5px;
  background-color: ",
              [Function],
              ";
  color: #fff;
  padding: 10px 15px;
  font-size: ",
              [Function],
              ";
  outline: none;
  border: none;
  cursor: pointer;
  margin: 15px;
  border: 2px solid ",
              [Function],
              ";
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inverse={false}
      secondary={false}
    >
      <button
        className="sc-htpNat hRPhco"
      >
        <Loader
          small={true}
          white={true}
        >
          <styled.div
            small={true}
            white={true}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "bSrzPW",
                    "rules": Array [
                      "
  display: inline-block;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              small={true}
              white={true}
            >
              <div
                className="sc-bdVaJa bSrzPW"
              >
                <styled.span
                  small={true}
                  style={Object {}}
                  white={true}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bwzfXH",
                          "isStatic": false,
                          "lastClassName": "kpIINS",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  height: ",
                            [Function],
                            ";
  background-color: ",
                            [Function],
                            ";
  border-radius: 100%;
  display: inline-block;
  animation: ",
                            Keyframes {
                              "id": "sc-keyframes-ghjfcd",
                              "inject": [Function],
                              "name": "ghjfcd",
                              "rules": Array [
                                "@-webkit-keyframes ghjfcd{0%,80%,100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);}40%{-webkit-transform:scale(1.0);-ms-transform:scale(1.0);transform:scale(1.0);}}",
                                "@keyframes ghjfcd{0%,80%,100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);}40%{-webkit-transform:scale(1.0);-ms-transform:scale(1.0);transform:scale(1.0);}}",
                              ],
                              "toString": [Function],
                            },
                            " 1s infinite ease-in-out both;
  &:first-child {
    animation-delay: -0.32s;
  }
  &:nth-child(2) {
    animation-delay: -0.16s;
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bwzfXH",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    small={true}
                    style={Object {}}
                    white={true}
                  >
                    <span
                      className="sc-bwzfXH kpIINS"
                      style={Object {}}
                    />
                  </StyledComponent>
                </styled.span>
                <styled.span
                  small={true}
                  style={Object {}}
                  white={true}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bwzfXH",
                          "isStatic": false,
                          "lastClassName": "kpIINS",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  height: ",
                            [Function],
                            ";
  background-color: ",
                            [Function],
                            ";
  border-radius: 100%;
  display: inline-block;
  animation: ",
                            Keyframes {
                              "id": "sc-keyframes-ghjfcd",
                              "inject": [Function],
                              "name": "ghjfcd",
                              "rules": Array [
                                "@-webkit-keyframes ghjfcd{0%,80%,100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);}40%{-webkit-transform:scale(1.0);-ms-transform:scale(1.0);transform:scale(1.0);}}",
                                "@keyframes ghjfcd{0%,80%,100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);}40%{-webkit-transform:scale(1.0);-ms-transform:scale(1.0);transform:scale(1.0);}}",
                              ],
                              "toString": [Function],
                            },
                            " 1s infinite ease-in-out both;
  &:first-child {
    animation-delay: -0.32s;
  }
  &:nth-child(2) {
    animation-delay: -0.16s;
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bwzfXH",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    small={true}
                    style={Object {}}
                    white={true}
                  >
                    <span
                      className="sc-bwzfXH kpIINS"
                      style={Object {}}
                    />
                  </StyledComponent>
                </styled.span>
                <styled.span
                  small={true}
                  style={Object {}}
                  white={true}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bwzfXH",
                          "isStatic": false,
                          "lastClassName": "kpIINS",
                          "rules": Array [
                            "
  width: ",
                            [Function],
                            ";
  height: ",
                            [Function],
                            ";
  background-color: ",
                            [Function],
                            ";
  border-radius: 100%;
  display: inline-block;
  animation: ",
                            Keyframes {
                              "id": "sc-keyframes-ghjfcd",
                              "inject": [Function],
                              "name": "ghjfcd",
                              "rules": Array [
                                "@-webkit-keyframes ghjfcd{0%,80%,100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);}40%{-webkit-transform:scale(1.0);-ms-transform:scale(1.0);transform:scale(1.0);}}",
                                "@keyframes ghjfcd{0%,80%,100%{-webkit-transform:scale(0);-ms-transform:scale(0);transform:scale(0);}40%{-webkit-transform:scale(1.0);-ms-transform:scale(1.0);transform:scale(1.0);}}",
                              ],
                              "toString": [Function],
                            },
                            " 1s infinite ease-in-out both;
  &:first-child {
    animation-delay: -0.32s;
  }
  &:nth-child(2) {
    animation-delay: -0.16s;
  }
",
                          ],
                        },
                        "displayName": "styled.span",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bwzfXH",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    small={true}
                    style={Object {}}
                    white={true}
                  >
                    <span
                      className="sc-bwzfXH kpIINS"
                      style={Object {}}
                    />
                  </StyledComponent>
                </styled.span>
              </div>
            </StyledComponent>
          </styled.div>
        </Loader>
      </button>
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button Secondary Button 1`] = `
<Button
  big={false}
  inverse={false}
  loading={false}
  secondary={true}
>
  <styled.button
    big={false}
    inverse={false}
    secondary={true}
  >
    <StyledComponent
      big={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "joqsUs",
            "rules": Array [
              "
  border-radius: 5px;
  background-color: ",
              [Function],
              ";
  color: #fff;
  padding: 10px 15px;
  font-size: ",
              [Function],
              ";
  outline: none;
  border: none;
  cursor: pointer;
  margin: 15px;
  border: 2px solid ",
              [Function],
              ";
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inverse={false}
      secondary={true}
    >
      <button
        className="sc-htpNat joqsUs"
      >
        Secondary Button
      </button>
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button should render as a component 1`] = `
<Button
  big={false}
  inverse={false}
  loading={false}
  secondary={false}
>
  <styled.button
    big={false}
    inverse={false}
    secondary={false}
  >
    <StyledComponent
      big={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "hRPhco",
            "rules": Array [
              "
  border-radius: 5px;
  background-color: ",
              [Function],
              ";
  color: #fff;
  padding: 10px 15px;
  font-size: ",
              [Function],
              ";
  outline: none;
  border: none;
  cursor: pointer;
  margin: 15px;
  border: 2px solid ",
              [Function],
              ";
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inverse={false}
      secondary={false}
    >
      <button
        className="sc-htpNat hRPhco"
      >
        Hello World
      </button>
    </StyledComponent>
  </styled.button>
</Button>
`;
